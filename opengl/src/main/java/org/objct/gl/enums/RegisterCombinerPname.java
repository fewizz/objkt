package org.objct.gl.enums;

import java.util.*;

import org.objkt.gl.GLConstants;

public enum RegisterCombinerPname {
	COMBINE(GLConstants.GL_COMBINE),
	COMBINE_ARB(GLConstants.GL_COMBINE_ARB),
	COMBINE_EXT(GLConstants.GL_COMBINE_EXT),
	COMBINE_RGB(GLConstants.GL_COMBINE_RGB),
	COMBINE_RGB_ARB(GLConstants.GL_COMBINE_RGB_ARB),
	COMBINE_RGB_EXT(GLConstants.GL_COMBINE_RGB_EXT),
	COMBINE_ALPHA(GLConstants.GL_COMBINE_ALPHA),
	COMBINE_ALPHA_ARB(GLConstants.GL_COMBINE_ALPHA_ARB),
	COMBINE_ALPHA_EXT(GLConstants.GL_COMBINE_ALPHA_EXT),
	RGB_SCALE(GLConstants.GL_RGB_SCALE),
	RGB_SCALE_ARB(GLConstants.GL_RGB_SCALE_ARB),
	RGB_SCALE_EXT(GLConstants.GL_RGB_SCALE_EXT),
	ADD_SIGNED(GLConstants.GL_ADD_SIGNED),
	ADD_SIGNED_ARB(GLConstants.GL_ADD_SIGNED_ARB),
	ADD_SIGNED_EXT(GLConstants.GL_ADD_SIGNED_EXT),
	INTERPOLATE(GLConstants.GL_INTERPOLATE),
	INTERPOLATE_ARB(GLConstants.GL_INTERPOLATE_ARB),
	INTERPOLATE_EXT(GLConstants.GL_INTERPOLATE_EXT),
	CONSTANT(GLConstants.GL_CONSTANT),
	CONSTANT_ARB(GLConstants.GL_CONSTANT_ARB),
	CONSTANT_EXT(GLConstants.GL_CONSTANT_EXT),
	CONSTANT_NV(GLConstants.GL_CONSTANT_NV),
	PRIMARY_COLOR(GLConstants.GL_PRIMARY_COLOR),
	PRIMARY_COLOR_ARB(GLConstants.GL_PRIMARY_COLOR_ARB),
	PRIMARY_COLOR_EXT(GLConstants.GL_PRIMARY_COLOR_EXT),
	PREVIOUS(GLConstants.GL_PREVIOUS),
	PREVIOUS_ARB(GLConstants.GL_PREVIOUS_ARB),
	PREVIOUS_EXT(GLConstants.GL_PREVIOUS_EXT),
	SOURCE0_RGB(GLConstants.GL_SOURCE0_RGB),
	SOURCE0_RGB_ARB(GLConstants.GL_SOURCE0_RGB_ARB),
	SOURCE0_RGB_EXT(GLConstants.GL_SOURCE0_RGB_EXT),
	SRC0_RGB(GLConstants.GL_SRC0_RGB),
	SOURCE1_RGB(GLConstants.GL_SOURCE1_RGB),
	SOURCE1_RGB_ARB(GLConstants.GL_SOURCE1_RGB_ARB),
	SOURCE1_RGB_EXT(GLConstants.GL_SOURCE1_RGB_EXT),
	SRC1_RGB(GLConstants.GL_SRC1_RGB),
	SOURCE2_RGB(GLConstants.GL_SOURCE2_RGB),
	SOURCE2_RGB_ARB(GLConstants.GL_SOURCE2_RGB_ARB),
	SOURCE2_RGB_EXT(GLConstants.GL_SOURCE2_RGB_EXT),
	SRC2_RGB(GLConstants.GL_SRC2_RGB),
	SOURCE3_RGB_NV(GLConstants.GL_SOURCE3_RGB_NV),
	SOURCE0_ALPHA(GLConstants.GL_SOURCE0_ALPHA),
	SOURCE0_ALPHA_ARB(GLConstants.GL_SOURCE0_ALPHA_ARB),
	SOURCE0_ALPHA_EXT(GLConstants.GL_SOURCE0_ALPHA_EXT),
	SRC0_ALPHA(GLConstants.GL_SRC0_ALPHA),
	SOURCE1_ALPHA(GLConstants.GL_SOURCE1_ALPHA),
	SOURCE1_ALPHA_ARB(GLConstants.GL_SOURCE1_ALPHA_ARB),
	SOURCE1_ALPHA_EXT(GLConstants.GL_SOURCE1_ALPHA_EXT),
	SRC1_ALPHA(GLConstants.GL_SRC1_ALPHA),
	SRC1_ALPHA_EXT(GLConstants.GL_SRC1_ALPHA_EXT),
	SOURCE2_ALPHA(GLConstants.GL_SOURCE2_ALPHA),
	SOURCE2_ALPHA_ARB(GLConstants.GL_SOURCE2_ALPHA_ARB),
	SOURCE2_ALPHA_EXT(GLConstants.GL_SOURCE2_ALPHA_EXT),
	SRC2_ALPHA(GLConstants.GL_SRC2_ALPHA),
	SOURCE3_ALPHA_NV(GLConstants.GL_SOURCE3_ALPHA_NV),
	OPERAND0_RGB(GLConstants.GL_OPERAND0_RGB),
	OPERAND0_RGB_ARB(GLConstants.GL_OPERAND0_RGB_ARB),
	OPERAND0_RGB_EXT(GLConstants.GL_OPERAND0_RGB_EXT),
	OPERAND1_RGB(GLConstants.GL_OPERAND1_RGB),
	OPERAND1_RGB_ARB(GLConstants.GL_OPERAND1_RGB_ARB),
	OPERAND1_RGB_EXT(GLConstants.GL_OPERAND1_RGB_EXT),
	OPERAND2_RGB(GLConstants.GL_OPERAND2_RGB),
	OPERAND2_RGB_ARB(GLConstants.GL_OPERAND2_RGB_ARB),
	OPERAND2_RGB_EXT(GLConstants.GL_OPERAND2_RGB_EXT),
	OPERAND3_RGB_NV(GLConstants.GL_OPERAND3_RGB_NV),
	OPERAND0_ALPHA(GLConstants.GL_OPERAND0_ALPHA),
	OPERAND0_ALPHA_ARB(GLConstants.GL_OPERAND0_ALPHA_ARB),
	OPERAND0_ALPHA_EXT(GLConstants.GL_OPERAND0_ALPHA_EXT),
	OPERAND1_ALPHA(GLConstants.GL_OPERAND1_ALPHA),
	OPERAND1_ALPHA_ARB(GLConstants.GL_OPERAND1_ALPHA_ARB),
	OPERAND1_ALPHA_EXT(GLConstants.GL_OPERAND1_ALPHA_EXT),
	OPERAND2_ALPHA(GLConstants.GL_OPERAND2_ALPHA),
	OPERAND2_ALPHA_ARB(GLConstants.GL_OPERAND2_ALPHA_ARB),
	OPERAND2_ALPHA_EXT(GLConstants.GL_OPERAND2_ALPHA_EXT),
	OPERAND3_ALPHA_NV(GLConstants.GL_OPERAND3_ALPHA_NV);

	RegisterCombinerPname(int token) {
		this.token = token;
	}

	public final int token;

	public static final RegisterCombinerPname[] VALUES = values();
	private static Map<Integer, RegisterCombinerPname> getMap() {
		Map<Integer, RegisterCombinerPname> map = new HashMap<>();
		for(RegisterCombinerPname val : VALUES) map.put(val.token, val);
		return map;	}
	private static final Map<Integer, RegisterCombinerPname> MAP = Collections.unmodifiableMap(getMap());
	public static RegisterCombinerPname get(int raw) { return MAP.get(raw); }

}